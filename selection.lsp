
(defun c:blksel()
	(setq ent(car (entsel "specify the block:")))
	(setq data(entget ent))
  (setq name(cdr(assoc 2 data)))
	(setq ss(ssget "X" (list (cons 0 "INSERT") (cons 2 name))))
	(sssetfirst ss ss)
)
(defun c:vpall()
	(setvar "TILEMODE" 0)
	(setq ss(ssget "X" (list (cons 0 "VIEWPORT") )))
	(command "VPORTS" "on" ss "")
)
(defun c:data()
	(setq data(getdata))
)
(defun getdata()
	(setq data(entget (car (entsel "specify the entity:"))))
	data 
)
(defun setvar0()
	(setq cmho(getvar "CMDECHO"))
	(setq hiht(getvar "HIGHLIGHT"))
	(setq blde(getvar "BLIPMODE"))
	;(setq snde(getvar "SNAPMODE"))
	(setq osde(getvar "OSMODE"))
	;(setq pist(getvar "PICKFIRST"))
	(setvar "CMDECHO" 0)
	(setvar "HIGHLIGHT" 0)
	(setvar "BLIPMODE" 0)
	(setvar "SNAPMODE" 0)
	(setvar "OSMODE" 0)
)
(defun resetvar0()
	(setvar "CMDECHO" cmho)
	(setvar "HIGHLIGHT" hiht)
	(setvar "BLIPMODE" blde)
	;(setvar "SNAPMODE" snde)
	(setvar "OSMODE" osde)
	;(setvar "PICKFIRST" pist)
)





(defun guanxian(pt rad)
	;(setvar0)	
	(command "layer" "m" "中实线" "")
	(AddCircle pt rad)
	;(command "CIRCLE" pt rad)
	;(vl-cmdf "CIRCLE" pt (* rad 1.1))
	;(setq rad2(* 1.1 rad))
	(AddCircle pt (* rad 1.2))
	;(command "CIRCLE" pt (* rad 1.2))
	(setq pt1(polar pt 0 (* 1.35 rad)))
	(setq pt2(polar pt (/ pi 2) (* 1.35 rad)))
	(setq pt3(polar pt (- pi) (* 1.35 rad)))
	(setq pt4 (polar pt (-(/ pi 2)) (* 1.35 rad)))
	;(command ".LINE" pt1 pt3 "")
	;(command ".LINE" pt2 pt4 "")
	(command "layer" "m" "点划线" "")
	(AddLine pt1 pt3)
	(AddLine pt2 pt4)
	;(vl-cmdf "line" pt1 pt3 "")
	;(vl-cmdf "line" pt2 pt4 "")
	;(princ)
	;(resetvar0)
)
(defun c:pipe()
	;(setvar0)
	(setq pt(getpoint "pick the point:"))
	(initget 7)
	(setq dia(getreal "specify the Diameter of the pipe<1000>:"))
	
	(guanxian pt (/ dia 2.0))
	;(resetvar0)
)

(defun c:txtLine()
	(setq ent(car(entsel "specify a text to line:")))
	(setq elist(entget ent))
	(if (eq (cdr(assoc 0 elist)) "TEXT")
		(progn
			(setvar0)
			(setq lay(getvar "clayer"))
			(setq th(cdr(assoc 40 elist)))；字高
			(command "ucs" "entity" ent);改成实体elist坐标系
			;(setq tang(cdr(assoc 50 elist)))
			(setq ptlist(textbox elist))；左下角右上角点位list
			(setq pt1(car ptlist))；左下角
			(setq pt2(cadr ptlist))；右上角
			(setq pt1x(polar pt1 (-  pi) (* 0.1 th)))
			(setq pt2x(list (car pt2) (cadr pt1) (caddr pt2)))
			(setq pt2x(polar pt2x 0 (* 0.1 th)))
			(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.15 th)))
			(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.15 th)))
			(command "layer" "m" "中实线" "")
			(setvar "CECOLOR" "BYLAYER")
			;(setq pt1x(trans pt1x 2 0))
			;(setq pt2x(trans pt2x 2 0))
			;(AddPL2pt pt1x pt2x (* 0.1 th))
			(command "PLINE" pt1x "w" (* 0.1 th) "" pt2x  "")
			(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.2 th)))
			(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.2 th)))
			(command "line" pt1x pt2x "")
			;(AddLine pt1x pt2x)
			(command "ucs" "w")
			(resetvar0)
			(setvar "CLAYER" lay)
		)
		(princ "No text is selected!")
	)
)

(defun txtline(txt)
	(setq elist(entget txt))
	(setvar0)
	(setq lay(getvar "clayer"))
	(setq th(cdr(assoc 40 elist)))；字高
	(command "ucs" "entity" txt);改成实体elist坐标系
	;(setq tang(cdr(assoc 50 elist)))
	(setq ptlist(textbox elist))；左下角右上角点位list
	(setq pt1(car ptlist))；左下角
	(setq pt2(cadr ptlist))；右上角
	(setq pt1x(polar pt1 (-  pi) (* 0.1 th)))
	(setq pt2x(list (car pt2) (cadr pt1) (caddr pt2)))
	(setq pt2x(polar pt2x 0 (* 0.1 th)))
	(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.15 th)))
	(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.15 th)))
	(command "layer" "m" "中实线" "")
	(setvar "CECOLOR" "BYLAYER")
	;(setq pt1x(trans pt1x 1 0))
	;(setq pt2x(trans pt2x 1 0))
	;(AddPL2pt pt1x pt2x (* 0.1 th))
	(command "PLINE" pt1x "w" (* 0.1 th) "" pt2x  "")
	(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.2 th)))
	(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.2 th)))
	(command "line" pt1x pt2x "")
	;(AddLine pt1x pt2x)
	(command "ucs" "w")
	(resetvar0)
	(setvar "CLAYER" lay)
)
(defun c:laytxtline();当前图层text全部划线
	(setq ss(ssget "x" (list (cons 8 (getvar "CLAYER")) (cons 0 "TEXT"))))
	(setq i 0 )
	;(setvar0)
	(setq lay(getvar "CLAYER"))
	(repeat (sslength ss)
		(progn
			(setq ssi(ssname ss i))
			(setq elist(entget ssi))
			(setq th(cdr(assoc 40 elist)))；字高
			(command "ucs" "entity" ssi);改成实体elist坐标系
			;(setq tang(cdr(assoc 50 elist)))
			(setq ptlist(textbox elist))；左下角右上角点位list
			(setq pt1(car ptlist))；左下角
			(setq pt2(cadr ptlist))；右上角
			(setq pt1x(polar pt1 (-  pi) (* 0.1 th)))
			(setq pt2x(list (car pt2) (cadr pt1) (caddr pt2)))
			(setq pt2x(polar pt2x 0 (* 0.1 th)))
			(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.15 th)))
			(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.15 th)))
			(command "layer" "s" "中实线" "")
			(setvar "CECOLOR" "bylayer")
			(AddPL2pt pt1x pt2x (* 0.1 th))
			;(command "PLINE" pt1x "w" (* 0.1 th) "" pt2x  "")
			(setq pt1x(polar pt1x (- (/ pi 2)) (* 0.2 th)))
			(setq pt2x(polar pt2x (- (/ pi 2)) (* 0.2 th)))
			(AddLine pt1x pt2x)
			;(command "line" pt1x pt2x "")
			(setq i(1+ i))
		)
	)
	;(resetvar0)
	(setvar "CLAYER" lay)
)
(defun c:tkList()
	(setq ss(ssget "x" (list (cons 0 "INSERT") (cons 2 "TK"))))
	(setq ptlist nil i 0)
	(repeat (sslength ss)
		(setq ssi(ssname ss i))
		(setq elist(entget ssi))
		(setq pt(cdr(assoc 10 elist)))
		(setq ptlist(cons pt ptlist))
		(setq i(1+ i))
	)
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (< (car e1) (car e2)))))
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (> (cadr e1) (cadr e2)))))
	;(setvar0)
	;(foreach pt ptlist
	;	(command "-plot" "y" "" "Adobe PDF" "A3" "M" "L" "N" "W" 
	;		pt (list (+ (car pt) 420.0) (+ (cadr pt) 297.0) (caddr pt))
	;		"1:1" "C" "Y" "xixian.ctb" "Y" "N" "N" "N" "N" 
	;		"N" "Y" 
	;	)
	;	(princ)
	;)
	;(resetvar0)
	ptlist
)

(defun c:pdflay()
	(setq ss(ssget "x" (list (cons 0 "INSERT") (cons 2 "TK"))))
	(setq ptlist nil i 0)
	(repeat (sslength ss)
		(setq ssi(ssname ss i))
		(setq elist(entget ssi))
		(setq pt(cdr(assoc 10 elist)))
		(setq ptlist(cons pt ptlist))
		(setq i(1+ i))
	)
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (< (car e1) (car e2)))))
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (> (cadr e1) (cadr e2)))))
	(setvar0)
	(setq i 0)
	(setvar "TILEMODE" 0)
	(repeat (length ptlist)
		(setq pt(nth i ptlist))
		(setq pt(list (+ 1.0 (car pt)) (+ 2.0 (cadr pt)) (caddr pt)))
		(setq fname(strcat (getvar "DWGPREFIX") (vl-string-trim ".dwg" (getvar "DWGNAME")) "-" (itoa (1+ i)) ".pdf"))
		(command "-plot" "y" "" "DWG To PDF.pc3" "ISO A3 (420.00 x 297.00 毫米)" "M" "L" "N" "W" 
			pt (list (+ (car pt) 420.0) (+ (cadr pt) 297.0) (caddr pt))
			"1:1" "C" "Y" "xixian.ctb" "Y" "N" "N" "N" fname
			"N" "Y" 
		)
		;(write-line fname scrfile)
		(princ)
		(setq i(1+ i))
	)
	(resetvar0)
)
(defun c:pdfmodel()
	(setq ss(ssget "x" (list (cons 0 "INSERT") (cons 2 "TK"))))
	(setq ptlist nil i 0)
	(repeat (sslength ss)
		(setq ssi(ssname ss i))
		(setq elist(entget ssi))
		(setq pt(cdr(assoc 10 elist)))
		;(setq pt(trans pt 2 1))
		(setq ptlist(cons pt ptlist))
		(setq i(1+ i))
	)
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (< (car e1) (car e2)))))
	(setq ptlist(vl-sort ptlist '(lambda (e1 e2) (> (cadr e1) (cadr e2)))))
	;(setvar0)
	(setq i 0)
	(setvar "TILEMODE" 1)
	(repeat (length ptlist)
		(setq pt(nth i ptlist))
		;(setq pt(list (+ 100.0 (car pt)) (+ 200.0 (cadr pt)) (caddr pt)))
		(setq fname(strcat (getvar "DWGPREFIX") (vl-string-trim ".dwg" (getvar "DWGNAME")) "-" (itoa (1+ i)) ".pdf"))
		(command "-plot" "y" "模型" "DWG To PDF.pc3" "ISO A3 (420.00 x 297.00 毫米)" "M" "L" "N" "W" 
			pt (list (+ (car pt) 42000.0) (+ (cadr pt) 29700.0) (caddr pt))
			"1:100" "C" "Y" "xixian.ctb" "Y" "W"  fname
			"N" "Y" 
		)
		;(write-line fname scrfile)
		;(princ)
		(setq i(1+ i))
	)
	;(resetvar0)
)
(defun c:695()
	(setvar "OSMODE" 695)
)